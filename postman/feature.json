{
	"info": {
		"_postman_id": "df80c686-123c-468c-bd56-af34a1768ace",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25678746"
	},
	"item": [
		{
			"name": "Private",
			"item": [
				{
					"name": "Создание пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Вася Пупкин\",\r\n    \"email\":\"user1@yandex.ru\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание категории",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Концерты\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"var start = moment().add(3, 'h');\r",
									"pm.environment.set('start', start.format('YYYY-MM-DD HH:mm:ss'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"annotation\":\"Tempore quidem aut distinctio. Repudiandae quia asperiores dignissimos odio enim. Cum quia voluptas excepturi eos occaecati ea. Vitae excepturi esse ut. Eveniet id quidem id dolorem sit ipsum non blanditiis. Provident incidunt accusamus et eos corrupti ut.\",\r\n\"category\":1,\r\n\"description\":\"Id ut porro enim. Ut quisquam velit sequi fugiat dolor quis est in distinctio. Inventore recusandae dolorum. Dolorem sequi ducimus et id quia aut eaque.\\n \\rQuidem earum eius molestias aut odit labore dicta. Perferendis sed voluptatem vel reiciendis eum facere enim consequatur. Debitis quasi rerum quidem corrupti labore repellat quos. Ratione occaecati inventore.\\n \\rQuod at qui voluptate sequi tenetur labore nihil. Distinctio sint saepe aliquid ut quo odit voluptatem tempora nam. Eum voluptatibus harum amet rerum sint cum. Eveniet nostrum iste ab doloremque accusamus libero. Esse aut ab qui voluptatem velit. Maiores velit distinctio architecto saepe blanditiis sequi.\",\r\n\"eventDate\":\"{{start}}\",\r\n\"location\":{\"lat\":2.1933,\"lon\":70.0192},\r\n\"paid\":\"false\",\r\n\"participantLimit\":\"829\",\r\n\"requestModeration\":\"false\",\r\n\"title\":\"Sunt adipisci et.\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария к событию 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"Привет мир!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/comments?eventId=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail Создание комментария к событию -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"Привет мир!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/comments?eventId=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail Создание комментария к событию 1 parent -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"Привет мир!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/comments?eventId=1&parentId=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "parentId",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail Создание комментария к событию 1 parent 'a'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"Привет мир!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/comments?eventId=1&parentId=a",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "parentId",
									"value": "a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail Получение события 1 с комментарием 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Присутствует поле comments и его длинна 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('comments');\r",
									"    pm.expect(jsonData.comments.length, '\"comments\" длинна должна быть 0').to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/events/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментария 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Комментарий имеет 'id' 1 и и статус 'PENDING'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id, '\"id\" комментария должно быть 1').to.eql(1);\r",
									"    pm.expect(jsonData.status, '\"status\" комментария должно быть PENDING').to.eql('PENDING');\r",
									"});\r",
									"\r",
									"pm.test(\"Проверка поля 'creator'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, 'Комментарий должен иметь поле \"creator\"').to.have.property('creator')\r",
									"    pm.expect(jsonData.creator.id, 'Создатель комментария должен иметь \"id\" 1').to.eql(1);\r",
									"    pm.expect(jsonData.creator.name, 'Создатель комментария должен иметь имя \"Вася Пупкин\"').to.eql('Вася Пупкин');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/comments/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание пользователя 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Cидор Васечкин\",\r\n    \"email\":\"user2@yandex.ru\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail Получение комментария 1  пользователем 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/2/comments/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария 2 к комментарию 1 события 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Присутствует поле parent и оно не null. Данные вернулись правильные.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('parent');\r",
									"    pm.expect(jsonData.parent.id, 'id создателя родительского комментария должно быть 1').to.eql(1);\r",
									"    pm.expect(jsonData.parent.text, 'Текст родительского комментария должен быть \"Привет мир!\"').to.eql('Привет мир!');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"Привет сосед!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2/comments?eventId=1&parentId=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "parentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Публикация комментариев 1 и 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?commentIds=1&commentIds=2&status=published",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "commentIds",
									"value": "1"
								},
								{
									"key": "commentIds",
									"value": "2"
								},
								{
									"key": "status",
									"value": "published"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение события 1 с комментарием 1 и 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Присутствует поле comments и его длинна 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('comments');\r",
									"    pm.expect(jsonData.comments.length, '\"comments\" длинна должна быть 2').to.eql(2);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/events/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение события 1 с комментариями",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Присутствует поле comments и его длинна 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('comments');\r",
									"    pm.expect(jsonData.comments.length, '\"comments\" длинна должна быть 1').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Комментарии именно те что нужен\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.comments[0].id, 'Комментарий должен быть с id 1').to.eql(1);\r",
									"    pm.expect(jsonData.comments[1].id, 'Комментарий должен быть с id 2').to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/events/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение комментария 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Комментарий имеет 'id' 1 и и статус 'PENDING'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id, '\"id\" комментария должно быть 1').to.eql(1);\r",
									"    pm.expect(jsonData.status, '\"status\" комментария должно быть PENDING').to.eql('PENDING');\r",
									"});\r",
									"\r",
									"pm.test(\"Проверка поля 'creator'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, 'Комментарий должен иметь поле \"creator\"').to.have.property('creator')\r",
									"    pm.expect(jsonData.creator.id, 'Создатель комментария должен иметь \"id\" 1').to.eql(1);\r",
									"    pm.expect(jsonData.creator.name, 'Создатель комментария должен иметь имя \"Вася Пупкин\"').to.eql('Вася Пупкин');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/comments/1?text=Изменяем Мир!",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments",
								"1"
							],
							"query": [
								{
									"key": "text",
									"value": "Изменяем Мир!"
								},
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail Изменение комментария 1 status published",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/comments/1?text=Изменяем Мир!&status=published",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments",
								"1"
							],
							"query": [
								{
									"key": "text",
									"value": "Изменяем Мир!"
								},
								{
									"key": "status",
									"value": "published"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail Изменение комментария 1 status pending повторно",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/comments/1?status=pending",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments",
								"1"
							],
							"query": [
								{
									"key": "text",
									"value": "Изменяем Мир!",
									"disabled": true
								},
								{
									"key": "status",
									"value": "pending"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/comments/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments",
								"1"
							],
							"query": [
								{
									"key": "text",
									"value": "Изменяем Мир!",
									"disabled": true
								},
								{
									"key": "status",
									"value": "pending",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail Удаление комментария 1 повторно",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/comments/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments",
								"1"
							],
							"query": [
								{
									"key": "text",
									"value": "Изменяем Мир!",
									"disabled": true
								},
								{
									"key": "status",
									"value": "pending",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail Публикация удаленного комментария 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?commentIds=1&status=Published",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "commentIds",
									"value": "1"
								},
								{
									"key": "status",
									"value": "Published"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение статуса  комментария 1 на pending",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/comments/1?status=pending",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments",
								"1"
							],
							"query": [
								{
									"key": "text",
									"value": "Изменяем Мир!",
									"disabled": true
								},
								{
									"key": "status",
									"value": "pending"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail Удаление комментария 1 изменением статуса",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/comments/1?status=deleted",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments",
								"1"
							],
							"query": [
								{
									"key": "text",
									"value": "Изменяем Мир!",
									"disabled": true
								},
								{
									"key": "status",
									"value": "deleted"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария 3 к комментарию 2 события 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Присутствует поле parent и оно не null. Данные вернулись правильные.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('parent');\r",
									"    pm.expect(jsonData.parent.id, 'id создателя родительского комментария должно быть 1').to.eql(2);\r",
									"    pm.expect(jsonData.parent.text, 'Текст родительского комментария должен быть \"Привет мир!\"').to.eql('Привет сосед!');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"Буду третьим ок?\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2/comments?eventId=1&parentId=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "parentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментария 3 администратором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Комментарий имеет 'id' 3 и правильное имя создателя\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id, '\"id\" комментария должно быть 3').to.eql(3);\r",
									"    pm.expect(jsonData.creator.name, 'Имя создателя комментария должно быть \"Cидор Васечкин\"').to.eql('Cидор Васечкин');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								"3"
							],
							"query": [
								{
									"key": "commentId",
									"value": "3",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев администратором без параметров",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Комментариев должно быть 3'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'Длинна массива равна 3').to.eql(3);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"var start = moment().subtract(4, 'h');\r",
									"pm.environment.set('start', start.format('YYYY-MM-DD HH:mm:ss'));\r",
									"var end = moment().add(1,'m');\r",
									"pm.environment.set('end', end.format('YYYY-MM-DD HH:mm:ss'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "userIds",
									"value": "1",
									"disabled": true
								},
								{
									"key": "userIds",
									"value": "2",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "{{start}}",
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": "{{end}}",
									"disabled": true
								},
								{
									"key": "status",
									"value": "published",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев администратором со всеми параметрами",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Комментариев должно быть 1'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'Длинна массива равна 1').to.eql(1);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"var start = moment().subtract(4, 'h');\r",
									"pm.environment.set('start', start.format('YYYY-MM-DD HH:mm:ss'));\r",
									"var end = moment().add(1,'m');\r",
									"pm.environment.set('end', end.format('YYYY-MM-DD HH:mm:ss'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?userIds=2&rangeStart={{start}}&rangeEnd={{end}}&status=published&commentIds=2&from=0&size=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "userIds",
									"value": "1",
									"disabled": true
								},
								{
									"key": "userIds",
									"value": "2"
								},
								{
									"key": "rangeStart",
									"value": "{{start}}"
								},
								{
									"key": "rangeEnd",
									"value": "{{end}}"
								},
								{
									"key": "status",
									"value": "published"
								},
								{
									"key": "commentIds",
									"value": "2"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев пользователем 2 без параметров",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Комментариев должно быть 2'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'Длинна массива равна 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Комментарии должны быть созданы пользователем 2\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].creator.id, 'Первый комментарий создан пользователем 2').to.eql(2);\r",
									"    pm.expect(jsonData[1].creator.id, 'Второй комментарий создан пользователем 2').to.eql(2);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"var start = moment().subtract(4, 'h');\r",
									"pm.environment.set('start', start.format('YYYY-MM-DD HH:mm:ss'));\r",
									"var end = moment().add(1,'m');\r",
									"pm.environment.set('end', end.format('YYYY-MM-DD HH:mm:ss'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/2/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"comments"
							],
							"query": [
								{
									"key": "userIds",
									"value": "1",
									"disabled": true
								},
								{
									"key": "userIds",
									"value": "2",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "{{start}}",
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": "{{end}}",
									"disabled": true
								},
								{
									"key": "status",
									"value": "published",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев пользователем 2 со всеми параметрами",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит тело в формате json\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Комментариев должно быть 1'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'Длинна массива равна 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Комментарии должны быть созданы пользователем 2\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].creator.id, 'Комментарий создан пользователем 2').to.eql(2);\r",
									"    pm.expect(jsonData[0].id, 'Комментарий имеет id 3').to.eql(3);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"var start = moment().subtract(4, 'h');\r",
									"pm.environment.set('start', start.format('YYYY-MM-DD HH:mm:ss'));\r",
									"var end = moment().add(1,'m');\r",
									"pm.environment.set('end', end.format('YYYY-MM-DD HH:mm:ss'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/2/comments?rangeStart={{start}}&rangeEnd={{end}}&status=pending&from=0&size=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"comments"
							],
							"query": [
								{
									"key": "userIds",
									"value": "1",
									"disabled": true
								},
								{
									"key": "userIds",
									"value": "2",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "{{start}}"
								},
								{
									"key": "rangeEnd",
									"value": "{{end}}"
								},
								{
									"key": "status",
									"value": "pending"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}